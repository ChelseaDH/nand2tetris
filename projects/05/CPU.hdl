// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Do we have a A or C instruction?
    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);

    // Choose between the instruction value or ALUOutput for the ARegister input
    Mux16(a=ALUOutput, b=instruction, sel=aInstruction, out=instructionOrALU);

    // A register
    // Load if A instuction or C instuction with destination bit set
    And(a=cInstruction, b=instruction[5], out=AinDest);
    Or(a=aInstruction, b=AinDest, out=shouldLoadARegister);
    ARegister(in=instructionOrALU, load=shouldLoadARegister, out=ARegisterOutput, out[0..14]=addressM);

    // D register
    // Load if C instruction and destination bit is set
    And(a=cInstruction, b=instruction[4], out=shouldLoadDRegister);
    DRegister(in=ALUOutput, load=shouldLoadDRegister, out=DRegisterOutput);

    // Choose between the ARegisterOutput and M value for second ALU input
    // Load = instruction's a-bit
    Mux16(a=ARegisterOutput, b=inM, sel=instruction[12], out=ARegisterOrMValue);

    // ALU
    // Control bits = the instruction's c-bits
    ALU(x=DRegisterOutput, y=ARegisterOrMValue, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOutput, out=outM, zr=ALUZeroCheck, ng=ALUNegativeCheck);

    // writeM
    // Value = third of instruction's d-bits if we have a C instruction
    And(a=instruction[3], b=cInstruction, out=writeM);

    // PC
    // Calculate jump
    Or(a=ALUNegativeCheck, b=ALUZeroCheck, out=ALUNegOrZero);
    Not(in=ALUNegOrZero, out=ALUPositiveCheck);             // Is ALU output positive?

    And(a=instruction[2], b=ALUNegativeCheck, out=JLT);     // ALU is negative and jump if negative
    And(a=instruction[1], b=ALUZeroCheck, out=JEQ);         // ALU is zero and jump if zero
    And(a=instruction[0], b=ALUPositiveCheck, out=JGT);     // ALU is positive and jump if positive
    Or(a=JLT, b=JEQ, out=JLE);
    Or(a=JLE, b=JGT, out=jumpToA);                          // Jump to A if conditions are met

    And(a=jumpToA, b=cInstruction, out=PCLoad);             // Only jump on a C instruction
    Not(in=PCLoad, out=PCInc);                              // Only incremenet when not loading

    PC(in=ARegisterOutput, load=PCLoad, inc=PCInc, reset=reset, out[0..14]=pc);
}