// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static array ram, freeList;

    static int HEAP_START, HEAP_END;

    // Structure of free heap segment
    // freeList[0]: address of next heap segment
    // freeList[1]: size of available memory in heap segment
    static int FL_NEXT;     // index of freeList.next
    static int FL_SIZE;   // index of freeList.size

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let HEAP_START = 2048;
        let HEAP_END = 16383;
        let freeList = HEAP_START;    // Heap base address
        let FL_NEXT = 0;
        let FL_SIZE = 1;
        let freeList[FL_NEXT] = null;
        let freeList[FL_SIZE] = 14334;    // Initial heap space
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var array prevSeg, currSeg, foundSeg;
        var int fullSize, nextSize, currSize;

        let prevSeg = null;
        let currSeg = freeList;

        if ((currSeg < HEAP_START) | (currSeg > HEAP_END)) {
            do Sys.error(1);
            return 0;
        }

        let fullSize = size + 2;
        let currSize = currSeg[FL_SIZE];

        // Find free seg that can hold the object
        // Found using first-fit heuristics
        while (~((currSize = size) | (~(currSize < fullSize)))) {
            let prevSeg = currSeg;
            let currSeg = currSeg[FL_NEXT];

            if (currSeg = 0) {
                do Sys.error(2);
                return 0;
            }

            let currSize = currSeg[FL_SIZE];
        }

        if (prevSeg = null) {   // Free space found at start of linked list
            let foundSeg = freeList;
            let freeList = Memory.allocNewSeg(foundSeg, fullSize);
        } else {
            let foundSeg = currSeg;
            let prevSeg[FL_NEXT] = Memory.allocNewSeg(foundSeg, fullSize);
        }

        // Return address after header info
        return foundSeg + 2;
    }

    function Array allocNewSeg(Array foundSeg, int fullSize) {
        var Array newSeg;

        if (foundSeg[FL_SIZE] = (fullSize - 2)) { // size is an exact match - need whole seg
            let newSeg = foundSeg[FL_NEXT];
            let foundSeg[FL_NEXT] = null;
        } else {
            let newSeg = foundSeg + fullSize;
            let newSeg[FL_NEXT] = foundSeg[FL_NEXT];
            let newSeg[FL_SIZE] = foundSeg[FL_SIZE] - fullSize;

            let foundSeg[FL_NEXT] = null;
            let foundSeg[FL_SIZE] = fullSize - 2;
        }

        return newSeg;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var array lastSeg;
        var int next;

        if (freeList = 0) {
            let freeList = o - 2;
            return;
        }

        let next = freeList[FL_NEXT];

        while (~(next = 0)) {
            let lastSeg = next;
            let next = lastSeg[FL_NEXT];
        }

        // Account for header information
        let lastSeg[FL_NEXT] = o - 2;
        return;
    }    
}
